/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Handles routing of /listings endpoints.
 */

import {Router, Request, Response, NextFunction} from 'express';

import merchantAuth from '../middleware/merchant-auth';
import validateAndFormatDate from '../middleware/validation/date';
import {listingService} from '../services';
import {BadRequestError} from '../utils/http-errors';

const listingRouter = Router();

/**
 * Handles the get request for retrieving all listings that satisfy the query
 * parameters.
 */
listingRouter.get(
  '/',
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      /**
       * Querying by ids is a restricted query, once the id field is specified, requester
       * would not be allowed to filter by any other query params.
       * Otherwise, it would be a Bad Request.
       */
      const {ids: idsStr} = req.query;
      if (idsStr !== undefined) {
        if (Object.keys(req.query).length > 1) {
          throw new BadRequestError(
            'Cannot query by other fields if ids is specified.'
          );
        }

        if (idsStr === '') {
          throw new BadRequestError('Query parameter ids cannot be empty.');
        }

        const ids = (idsStr as string).split(',').map(idStr => {
          const id = Number(idStr);
          if (Number.isNaN(id)) {
            throw new BadRequestError(`Invalid listingId ${idStr}`);
          }
          return id;
        });
        const listings = await listingService.getAllListingsWithIds(ids);
        res.json(listings);
        return;
      }

      const filters = Object.keys(req.query).map(key => ({
        property: key,
        value: key === 'merchantId' ? Number(req.query[key]) : req.query[key],
      }));
      const listings = await listingService.getAllListings(filters);
      res.json(listings);
    } catch (error) {
      return next(error);
    }
  }
);

/**
 * Handles the get request for a specfic listing id.
 * Listing id is the default primary key generated by datastore when a new entity is created.
 */
listingRouter.get(
  '/:listingId',
  async (req: Request, res: Response, next: NextFunction) => {
    const {listingId: listingIdStr} = req.params;
    const listingId = Number(listingIdStr);

    try {
      if (Number.isNaN(listingId)) {
        throw new BadRequestError(`Invalid listingId ${listingIdStr}`);
      }

      const listing = await listingService.getListing(listingId);
      res.send(listing);
    } catch (error) {
      return next(error);
    }
  }
);

listingRouter.post(
  '/',
  merchantAuth,
  validateAndFormatDate(
    /* eslint-disable @typescript-eslint/no-explicit-any */
    (body: any) => body.deadline,
    (body: any, date: Date) => (body.deadline = date)
    /* eslint-ensable @typescript-eslint/no-explicit-any */
  ),
  async (req: Request, res: Response, next: NextFunction) => {
    const listingData = req.body;
    try {
      const listing = await listingService.addListing(listingData);
      const resourceUrl = `${process.env.SERVER_URL}/listings/${listing.id}`;
      res.setHeader('Content-Location', resourceUrl);
      res.location(resourceUrl);
      res.status(201);
      res.json(listing);
    } catch (error) {
      return next(error);
    }
  }
);

/**
 * Handles the post request to update status of outdated listings to 'successful'
 * or 'unsuccessful' based on whether or not the number of commits reach the
 * specified minimum. This endpoint is invoked by a scheduled cron job every day
 * at midnight according to Indian Standard Time (IST). The scheduler can be
 * viewed/modified at https://pantheon.corp.google.com/cloudscheduler?project=gpay-group-buy.
 */
listingRouter.post(
  '/outdated',
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const updatedListings = await listingService.updateOutdatedListingOutcomeStatuses();
      res.status(200);
      res.json(updatedListings);
      // TODO(#115): Add error handling with the appropriate response codes.
    } catch (error) {
      return next(error);
    }
  }
);

export default listingRouter;
